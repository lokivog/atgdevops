filter {

	if [type] == "jboss" {

		multiline {
		    #match the jboss timestamp and combine all lines up to the next jboss timestamp
	  		pattern => "(?>\d\d){1,2}-(?:0?[1-9]|1[0-2])-(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])[T ](?:2[0123]|[01]?[0-9])(?::?(?:(?:[0-5][0-9]|60)(?:[:.,][0-9]+)?))"
	  		negate => true
	  		what => "previous"
		}

		grok {
		    #match jboss log message as [timestamp] [loglevel] [className] [message]
			#TODO can't get the patterns dir to pick up the JBOSSLOGMSG
			#patterns_dir => "PATTERNS_DIR"
            #match => [ "message", "%{JBOSSLOGMSG}"]
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:level}\s+\[%{DATA:className}\]%{SPACE}%{GREEDYDATA:message}"]
		 	add_tag => ["standard_msg"]
		 	tag_on_failure => ["grokparsefailure_jbossmsg"]
		 	add_field => ["branch","Integration_12.0.0","job_num", "1416", "build","Integration_12.0.0.1416"]
		}
		
		if [level] not in ["ERROR","WARN"] {
			#if log message is not ERROR or WARN then drop
			#comment out to log all messages
			drop {}
		}


		if [className] in ["org.jboss.kernel.plugins.dependency.InstallAction", "STDERR"]  { 
			#drop InstallAction warning that get fired when the server is shutting down
			drop {}
    	}

		ruby {
  			#trim a multiline message to "N" lines
  			#default to 15 lines
  			code => "event['message'] = event['message'][0].lines.to_a[0,15].join;"
		}

		grok {
	  		# extract jboss server name from log file path
	  		match => ["path", "server\/(?<server>\w*)"]
	  		tag_on_failure => ["grokparsefailure_server"]
		}
		
		grok {
	  		# extract release number from branch name
      		match => [ "branch", "Integration_%{NUMBER:release:int}" ]
		}
		
		grok {
	  		# convert job_num to integer for elasticsearch field type
      		match => [ "job_num", "%{NUMBER:job:int}" ]
      		remove_field => [ "job_num" ]
		}
		
		if "multiline" in [tags] {
			grok {
		  		# extract jboss server name from log file path
		  		match => ["message", "\sat\s(?<exception>\S+\))\s"]
		  		add_tag => ["exception"]
		  		tag_on_failure => ["grokparsefailure_exception"]
			}
			grok {
		  		# extract jboss server name from log file path
		  		match => ["message", "_jspx\S+\((?<jsp>\S+)\)"]
		  		add_tag => ["exception_jsp"]
		  		tag_on_failure => ["no_jsp_match"]
			}
			if "exception" in [tags] {
				grok {
		  			# extract jboss server name from log file path
		  			match => ["exception", "\((?<exceptionClass>\S+)\)"]
		  			add_tag => ["exception_class"]
		  			tag_on_failure => ["grokparsefailure_class"]
				}
			}
			if "exception_class" in [tags] {
				grok {
		  			# extract jboss server name from log file path
		  			match => ["exceptionClass", "(?<lineNumber>\d+)"]
		  			add_tag => ["line_number"]
		  			tag_on_failure => ["grokparsefailure_line"]
				}
			}
		}

		date { 
	  		#normalize logstash timestamp from jboss timestamp
	  		match => ["timestamp","yyyy-MM-dd HH:mm:ss,SSS"]
		}

	}
}