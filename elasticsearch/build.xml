<?xml version="1.0" encoding="UTF-8"?>
<!-- @author Michael Vogel -->
<project name="elasticsearch" default="start" basedir=".">

	<!-- ======================================================================= -->
	<!-- SET PROPERTIES -->
	<!-- ======================================================================= -->

	<property name="builder" value="../atgdevopsbuilder" />
	<!-- Load environment vars first -->

	<!-- Load common build file -->
	<import file="${builder}/common.xml" />

	<condition property="elasticsearch.extracted" value="true">
		<available file="${build.dir}/${elasticsearch.file}" type="file" />
	</condition>

	<condition property="isUnix" value="true">
		<os family="unix" />
	</condition>

	<condition property="isWin" value="true">
		<os family="windows" />
	</condition>

	<!-- =================================================================== -->
	<!-- TARGETS -->
	<!-- =================================================================== -->


	<target name="-unzip-unix" if="isUnix" unless="elasticsearch.extracted">
		<mkdir dir="${build.dir}" />
		<copy todir="${build.dir}" file="${srcdist.dir}/${elasticsearch.file}" />
		<exec command="unzip ${build.dir}/${elasticsearch.file} -d ${build.dir}" />
	</target>

	<target name="-unzip-win" if="isWin" unless="elasticsearch.extracted">
		<mkdir dir="${build.dir}" />
		<copy todir="${build.dir}" file="${srcdist.dir}/${elasticsearch.file}" />
		<unzip src="${build.dir}/${elasticsearch.file}" dest="${build.dir}" />
	</target>

	<target name="build" depends="-unzip-unix,-unzip-win" unless="elasticsearch.extracted">
		<basename property="elasticsearch.version" file="${srcdist.dir}/${elasticsearch.file}" suffix=".zip" />
		<mkdir dir="${build.dir}/${name}" />
		<move todir="${build.dir}/${name}">
			<fileset dir="${build.dir}/${elasticsearch.version}/" />
		</move>
	</target>

	<target name="clean-data" description="Cleans the saved elasticsearch json data">
		<delete dir="${build.dir}/${name}/data" />
	</target>

	<target name="start" depends="build,-server-running" if="server.down" description="Starts elasticsearch">
		<echo message="elasticsearch server.up ${server.down}" />
		<echo message="Server starting at http://localhost:${server.port}" />
		<condition property="exec.args" value="-f" else="">
			<equals arg1="${foreground}" arg2="true" />
		</condition>
		<condition property="spawn" value="false" else="true">
			<equals arg1="${foreground}" arg2="true" />
		</condition>
		<exec executable="${build.dir}/${exec.dir}/${exec.file}" osfamily="unix">
			<arg line="${exec.args}" />
		</exec>
		<exec executable="${build.dir}/${exec.dir}/${exec.file}.bat" osfamily="windows" spawn="${spawn}">
		</exec>
	</target>
	
	<target name="shutdown" description="Shutdown elasticsearch">
		<post to="http://localhost:9200/_shutdown" verbose="true" />
	</target>

	<target name="query-es" description="Queries the elasticsearch instances. Used primarily to test if the server is running">
		<post to="http://localhost:9200/_search" verbose="true" failonerror="true">
			<prop name="pretty" value="1" />
			<prop name="q" value="*" />
		</post>
	</target>

</project>